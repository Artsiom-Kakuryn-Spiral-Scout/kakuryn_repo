name: Build and push web-server image

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'ðŸŽ…Environment:ðŸŽ…'
        required: true
        type: choice
        options:
          - NEO-DEV
          - NEO-INTERNAL-UAT
          - NEO-QA
          - sova-demo-ecs
          - sova-internal-uat-ecs
          - NEO-DEMO
      deploy:
        type: boolean
        description: 'ðŸŽ…Deploy to the EnvironmentðŸŽ…'
        default: false


permissions:
  id-token: write
  contents: write

#TODO replace env values with GitHub Secrets

env:
  AWS_REGION: us-east-1 #${{ secrets.AWS_REGION }}
  ECR_REGISTRY: 1231.dkr.ecr.us-east-1.amazonaws.com #${{ secrets.ECR_REGISTRY }}
  ROLE_TO_ASSUME: arn:aws:iam::1231:role/ECR-GITHUB-OPEN-ID-CONNECT-ROLE #${{ secrets.ROLE_TO_ASSUME }}
  # DEMO_ALLOW_DEPLOY: ("Artsiom-Kakuryn-Spiral-Scout" "yasingedik-avg")
  # QA_ALLOW_DEPLOY: ("yasingedik-avg" "askd")
  INTERNAL_UAT_ALLOW_DEPLOY: ${{ vars.INTERNAL_UAT_ALLOW_DEPLOY }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_version: ${{ steps.set-version.outputs.version }}
    
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.16

      # - name: Installing packages
      #   run: npm ci

      # - name: Bundling
      #   run: npm run dist
        
      # - name: get-npm-version
      #   id: package-version
      #   uses: Sourcing-Value/npm-get-version-action@1.4.0

      - name: Temp
        id: Temp
        run: |
          if [[ ${{ secrets.PROTECTED_ENVIRONMENTS }} == *"${{inputs.ENVIRONMENT}}"* ]] ; then
            case ${{inputs.ENVIRONMENT}} in
              NEO-DEMO)
                users=${{ secrets.DEMO_ALLOW_DEPLOY }}
                ;;
              NEO-INTERNAL-UAT)
                users=${{ env.INTERNAL_UAT_ALLOW_DEPLOY }}
                ;;
              NEO-QA)
                users=${{ secrets.QA_ALLOW_DEPLOY }}
                ;;
            esac
            for user in ${users[*]}
              do
                if [[ "$user" == ${{ github.actor }} ]]; then
                  exit 0
                fi
            done
            echo "::error:: User ${{ github.actor }} doesn't have access deploy to ${{inputs.ENVIRONMENT}} environment"
            exit 1
          fi

      - name: Create file
        run: |
          mkdir temp_folder
          touch temp_folder/file.txt
          # tar -czvf temp_folder.tar.gz temp_folder/*
          # ls

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: 1.1.${{ github.run_number }}
          release_name: 1.1.${{ github.run_number }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "temp_folder/*"
          asset_name: temp_folder
          tag: 1.1.${{ github.run_number }}
          overwrite: true
          body: "This is my release text"

      # - uses: ncipollo/release-action@v1
      #   with:
      #     tag: 1.1.${{ github.run_number }}
      #     artifacts: "release.tar.gz,temp_folder/*"
      #     body: |
      #       Changes in this Release
      #       - First Change
      #       - Second Change


      # - name: Get ECR Repository
      #   id: set-repository
      #   run: |
      #     case ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}} in
      #       master)
      #         echo prod
      #         echo "ECR_REPOSITORY=sv-frontend-prod" >> $GITHUB_OUTPUT
      #         ;;
      #       *)
      #         echo nonprod
      #         echo "ECR_REPOSITORY=sv-frontend-dev" >> $GITHUB_OUTPUT
      #         ;;
      #     esac

      # - name: Get ECR, project version 
      #   id: set-version
      #   run: |
      #     VERSION=${{ steps.package-version.outputs.current-version }}
      #     BUILD_NUMBER=${{ github.run_number }}
      #     VERSION_WITH_BUILD=${VERSION}.${BUILD_NUMBER}.$(git rev-parse --short HEAD)
      #     echo "version=${VERSION_WITH_BUILD}" >> $GITHUB_OUTPUT
      #     echo "ECR=${{ env.ECR_REGISTRY }}/${{ steps.set-repository.outputs.ECR_REPOSITORY }}" >> $GITHUB_OUTPUT
        
      # - name: Build Docker image with build number
      #   run: |
      #     docker build --platform linux/amd64 -t ${{ env.ECR_REGISTRY }}/${{ steps.set-repository.outputs.ECR_REPOSITORY }}:${{ steps.set-version.outputs.version }} -t ${{ env.ECR_REGISTRY }}/${{ steps.set-repository.outputs.ECR_REPOSITORY }}:latest .
      # - name: Configure AWS credentials with OIDC
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     role-to-assume: ${{ env.ROLE_TO_ASSUME }}
      #     aws-region: ${{ env.AWS_REGION }}

      # - name: Login to AWS ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

  #     - name: Push Docker image
  #       run: |
  #         echo ${{ env.ECR_REGISTRY }}/${{ steps.set-repository.outputs.ECR_REPOSITORY }}:${{ steps.set-version.outputs.version }}
  #         echo ${{ env.ECR_REGISTRY }}/${{ steps.set-repository.outputs.ECR_REPOSITORY }}:latest
  #         echo ${{ steps.set-version.outputs.ECR }}:${{ steps.set-version.outputs.version }}
  #         echo ${{ steps.set-version.outputs.ECR }}:latest
  #         # docker push ${{ env.ECR_REGISTRY }}/${{ steps.set-repository.outputs.ECR_REPOSITORY }}:${{ steps.set-version.outputs.version }}
  #         # docker push ${{ env.ECR_REGISTRY }}/${{ steps.set-repository.outputs.ECR_REPOSITORY }}:latest

  # deploy:
  #   needs: build-and-push
  #   if: ${{ inputs.deploy == true }} 
  #   name: Deploy web-server
  #   uses: ./.github/workflows/deploy.yml
  #   secrets: inherit
  #   with:
  #     environment: ${{inputs.environment}}
  #     image: ${{needs.build-and-push.outputs.image_version}}

